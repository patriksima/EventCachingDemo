// <auto-generated />
using System;
using EventCachingDemo.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventCachingDemo.Server.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220613151322_Seeding")]
    partial class Seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventCachingDemo.Server.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("5d158b18-d717-dcf4-63f6-063cc2efe200"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Rustic Frozen Computer",
                            Price = 648.26m
                        },
                        new
                        {
                            ProductId = new Guid("4511510c-a07e-cbfe-e5ca-227e3b0826da"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Unbranded Granite Salad",
                            Price = 481.92m
                        },
                        new
                        {
                            ProductId = new Guid("e7d28532-79fc-9b88-7864-01ef9b3c4840"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Ergonomic Concrete Table",
                            Price = 251.36m
                        },
                        new
                        {
                            ProductId = new Guid("7c94da40-64ba-b208-48a7-7c32790a65f0"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Gorgeous Granite Tuna",
                            Price = 734.08m
                        },
                        new
                        {
                            ProductId = new Guid("090a593a-2ff5-1719-53bc-3446867161cd"),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Sleek Frozen Cheese",
                            Price = 396.42m
                        });
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MostSoldProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("SalesAgentId");

                    b.HasIndex("Year", "Week");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesAgent", b =>
                {
                    b.Property<Guid>("SalesAgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalesAgentId");

                    b.HasIndex("SalesDepartmentId");

                    b.ToTable("SalesAgents");

                    b.HasData(
                        new
                        {
                            SalesAgentId = new Guid("f8ff9093-cece-5de1-b5f5-17a797f95df9"),
                            FirstName = "Randy",
                            LastName = "Wehner",
                            SalesDepartmentId = new Guid("1596c81f-9f8c-c63e-8372-68d982f70a04")
                        },
                        new
                        {
                            SalesAgentId = new Guid("774eb7ae-4027-730f-293b-e05a96907036"),
                            FirstName = "Colin",
                            LastName = "Koch",
                            SalesDepartmentId = new Guid("7b4c1c8e-fd7a-84da-0e83-5a72fe941cbb")
                        },
                        new
                        {
                            SalesAgentId = new Guid("247815f7-6b0f-1c92-29cc-eaa1374541b4"),
                            FirstName = "Kelli",
                            LastName = "Keebler",
                            SalesDepartmentId = new Guid("61a8fd24-6459-8489-0139-8a43e1e2687d")
                        },
                        new
                        {
                            SalesAgentId = new Guid("c385fcd1-f406-493e-63fb-6514d9110e7a"),
                            FirstName = "Pamela",
                            LastName = "Labadie",
                            SalesDepartmentId = new Guid("7b4c1c8e-fd7a-84da-0e83-5a72fe941cbb")
                        },
                        new
                        {
                            SalesAgentId = new Guid("7c97503e-481c-3562-90c9-4ccbf5657806"),
                            FirstName = "Glenn",
                            LastName = "Ernser",
                            SalesDepartmentId = new Guid("7b4c1c8e-fd7a-84da-0e83-5a72fe941cbb")
                        },
                        new
                        {
                            SalesAgentId = new Guid("d1688652-f46f-0d23-5d03-f7d7abc0e7d5"),
                            FirstName = "Mario",
                            LastName = "Lindgren",
                            SalesDepartmentId = new Guid("60c13b7f-ab0f-c002-904a-059efa9e8437")
                        },
                        new
                        {
                            SalesAgentId = new Guid("027188f1-9cd5-b1bf-8593-69722eb09529"),
                            FirstName = "Brad",
                            LastName = "Haag",
                            SalesDepartmentId = new Guid("38c1e55d-2645-bb0e-88c1-12a6b9578ef8")
                        },
                        new
                        {
                            SalesAgentId = new Guid("81efbf7a-021b-ce70-d19c-1d6a736074f2"),
                            FirstName = "Constance",
                            LastName = "Williamson",
                            SalesDepartmentId = new Guid("60c13b7f-ab0f-c002-904a-059efa9e8437")
                        },
                        new
                        {
                            SalesAgentId = new Guid("8da4c1e8-9c08-3b03-e075-aeabf256595c"),
                            FirstName = "Reginald",
                            LastName = "VonRueden",
                            SalesDepartmentId = new Guid("7b4c1c8e-fd7a-84da-0e83-5a72fe941cbb")
                        },
                        new
                        {
                            SalesAgentId = new Guid("93dd4108-57e3-dd43-f4af-67e798adf01a"),
                            FirstName = "Sheryl",
                            LastName = "Denesik",
                            SalesDepartmentId = new Guid("60c13b7f-ab0f-c002-904a-059efa9e8437")
                        });
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesDepartment", b =>
                {
                    b.Property<Guid>("SalesDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesDepartmentId");

                    b.ToTable("SalesDepartments");

                    b.HasData(
                        new
                        {
                            SalesDepartmentId = new Guid("1596c81f-9f8c-c63e-8372-68d982f70a04"),
                            Description = "Quibusdam qui animi.",
                            Name = "Grocery"
                        },
                        new
                        {
                            SalesDepartmentId = new Guid("7b4c1c8e-fd7a-84da-0e83-5a72fe941cbb"),
                            Description = "Debitis nulla repudiandae.",
                            Name = "Electronics, Books & Clothing"
                        },
                        new
                        {
                            SalesDepartmentId = new Guid("38c1e55d-2645-bb0e-88c1-12a6b9578ef8"),
                            Description = "Aliquam eos voluptates.",
                            Name = "Home, Baby & Tools"
                        },
                        new
                        {
                            SalesDepartmentId = new Guid("61a8fd24-6459-8489-0139-8a43e1e2687d"),
                            Description = "Est et qui.",
                            Name = "Sports & Baby"
                        },
                        new
                        {
                            SalesDepartmentId = new Guid("60c13b7f-ab0f-c002-904a-059efa9e8437"),
                            Description = "Eum quasi blanditiis.",
                            Name = "Automotive"
                        });
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesLog", b =>
                {
                    b.Property<Guid>("SalesLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DayOfSale")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SalesAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalesLogId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("SalesLogs");
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.Report", b =>
                {
                    b.HasOne("EventCachingDemo.Server.Models.SalesAgent", "SalesAgent")
                        .WithMany()
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesAgent", b =>
                {
                    b.HasOne("EventCachingDemo.Server.Models.SalesDepartment", "SalesDepartment")
                        .WithMany("SalesAgents")
                        .HasForeignKey("SalesDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesDepartment");
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesLog", b =>
                {
                    b.HasOne("EventCachingDemo.Server.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventCachingDemo.Server.Models.SalesAgent", "SalesAgent")
                        .WithMany()
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("EventCachingDemo.Server.Models.SalesDepartment", b =>
                {
                    b.Navigation("SalesAgents");
                });
#pragma warning restore 612, 618
        }
    }
}
