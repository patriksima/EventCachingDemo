@page "/SalesLogs"
@using EventCachingDemo.Shared.Queries
@using EventCachingDemo.Shared.Commands

<h3>Sales Logs</h3>

@if (_salesLogs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <label>
            Agent:
            <select @bind="@_salesAgentId">
                <option value="">--choose agent--</option>
                @foreach (var agent in _salesAgents!)
                {
                    <option value="@agent.SalesAgentId">@agent.FullName</option>
                }
            </select>
        </label>
        <label>
            Product:
            <select @bind="@_productId">
                <option value="">--pick product--</option>
                @foreach (var product in _products!)
                {
                    <option value="@product.ProductId">@product.Name (@product.Price)</option>
                }
            </select>
        </label>
        <label>
            Quantity:
            <input @bind="@_quantity"/>
        </label>
        <label>
            Total Price:
            <input @bind="@_totalPrice"/>
        </label>
        <label>
            Date of Sale:
            <input @bind="@_dateOfSale" type="date"/>
        </label>
        <button @onclick="AddLog">Add Log</button>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Agent</th>
            <th>Product</th>
            <th>Quantity</th>
            <th>Total</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var salesLog in _salesLogs)
        {
            <tr>
                <td>@salesLog.DayOfSale.ToLocalTime()</td>
                <td>@salesLog.SalesAgent</td>
                <td>@salesLog.Product</td>
                <td>@salesLog.Quantity</td>
                <td>@salesLog.Price</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private Guid _productId;
    private Guid _salesAgentId;
    private IList<ProductDto>? _products;
    private IList<SalesAgentDto>? _salesAgents;
    private IList<SalesLogDto>? _salesLogs;
    private int _quantity;
    private decimal _totalPrice;
    private DateTime _dateOfSale;

    protected override async Task OnInitializedAsync()
    {
        _dateOfSale = DateTime.Now;
        _products = await HttpClient.SendAsync(new ProductsQuery());
        _salesLogs = await HttpClient.SendAsync(new SalesLogQuery());
        _salesAgents = await HttpClient.SendAsync(new SalesAgentsQuery());
    }

    private async Task AddLog(MouseEventArgs arg)
    {
    // add log
        await HttpClient.SendAsync(new AddLogCommand(_productId, _salesAgentId, _quantity, _totalPrice, _dateOfSale));
    // clear form
        _productId = Guid.Empty;
        _salesAgentId = Guid.Empty;
        _quantity = 0;
        _totalPrice = 0;
        _dateOfSale = DateTime.Now;
    // refresh log data
        _salesLogs = await HttpClient.SendAsync(new SalesLogQuery());
    // notify ui
        StateHasChanged();
    }


}