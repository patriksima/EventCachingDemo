@page "/SalesLogs/{Week:int?}"
@using EventCachingDemo.Shared.Helpers
@using EventCachingDemo.Shared.Queries
@using EventCachingDemo.Shared.Commands

<h3>Sales Logs</h3>
@if (Week is not null)
{
    var filterTitle = $"Selected week: {Week}";
    <h5>@filterTitle</h5>
}

@if (_salesLogs is null || _salesAgents is null || _products is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <label>
            Agent:
            <InputSelect @bind-Value="@_model.SalesAgentId">
                <option value="">--choose agent--</option>
                @foreach (var saleAgent in _salesAgents)
                {
                    <option value="@saleAgent.SalesAgentId">@saleAgent.FullName</option>
                }
            </InputSelect>
        </label>
        <label>
            Product:
            <InputSelect @bind-Value="@_model.ProductId">
                <option value="">--choose product--</option>
                @foreach (var product in _products)
                {
                    <option value="@product.ProductId">@product.Name (@product.Price)</option>
                }
            </InputSelect>
        </label>
        <label>
            Quantity:
            <InputNumber TValue="int" ValueChanged="QuantityChanged" ValueExpression="() => _model.Quantity"/>
        </label>
        <label>
            Total Price:
            <InputNumber @bind-Value="@_model.Price"/>
        </label>
        <label>
            Date of Sale:
            <InputDate @bind-Value="@_model.DateOfSale"/>
        </label>
        <button type="submit">Add log</button>
    </EditForm>

    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Week</th>
            <th>Agent</th>
            <th>Product</th>
            <th>Quantity</th>
            <th>Total</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var salesLog in _salesLogs)
        {
            var firstMonday = salesLog.DayOfSale.DateTime.GetFirstMondayOfYear().DayOfYear;
            <tr>
                <td>@salesLog.DayOfSale.ToLocalTime().ToString("d")</td>
                <td>@((int)Math.Floor((double)(salesLog.DayOfSale.DayOfYear - firstMonday) / 7) + 2)</td>
                <td>@salesLog.SalesAgent</td>
                <td>@salesLog.Product</td>
                <td>@salesLog.Quantity</td>
                <td class="text-end">@salesLog.Price.ToString("C2")</td>
            </tr>
        }
        </tbody>
    </table>
    <button @onclick="PurgeLog">Purge log</button>
}

@code {
    private IList<ProductDto>? _products;
    private IList<SalesAgentDto>? _salesAgents;
    private IList<SalesLogDto>? _salesLogs;

    [Parameter]
    public int? Week { get; set; }

    private readonly AddSalesLogCommand _model = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadSalesLogs();
        await LoadSalesAgents();
    }

    private async Task LoadProducts()
    {
        _products = await HttpClient.SendAsync(new ProductsQuery());
    }

    private async Task LoadSalesLogs()
    {
        _salesLogs = await HttpClient.SendAsync(new SalesLogQuery());
    }

    private async Task LoadSalesAgents()
    {
        _salesAgents = await HttpClient.SendAsync(new SalesAgentsQuery());
    }

    private async Task HandleValidSubmit(EditContext arg)
    {
        await HttpClient.SendAsync(_model);

        await LoadSalesLogs();

        ResetModel();

        StateHasChanged();
    }

    private void ResetModel()
    {
        _model.SalesAgentId = Guid.Empty;
        _model.ProductId = Guid.Empty;
        _model.Quantity = 0;
        _model.Price = 0m;
        _model.DateOfSale = DateTimeOffset.Now;
    }

    private void QuantityChanged(int quantity)
    {
        _model.Quantity = quantity;
        if (_model.ProductId != Guid.Empty)
            _model.Price = quantity * _products!.Where(e => e.ProductId == _model.ProductId).Select(e => e.Price).FirstOrDefault();
    }

    private async Task PurgeLog(MouseEventArgs arg)
    {
        await HttpClient.SendAsync(new PurgeLogCommand());
        _salesLogs = new List<SalesLogDto>();
        StateHasChanged();
    }

}